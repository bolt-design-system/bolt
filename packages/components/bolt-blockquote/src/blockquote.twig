{% set schema = bolt.data.components["@bolt-components-blockquote"].schema %}

{% if enable_json_schema_validation %}
  {{ validate_data_schema(schema, _self) | raw }}
{% endif %}

{# Variables #}
{% set base_class = "c-bolt-blockquote" %}
{% set props = create_attribute({
  "size": size,
  "align-items": alignItems,
  "border": border,
  "indent": indent,
  "full-bleed": fullBleed,
  "author-name": author.name,
  "author-title": author.title,
  "author-title": author.title,
  "author-image": author.image
}) %}
{% set attributes = merge_attributes(create_attribute(attributes|default({})), props) %}
{% set inner_attributes = create_attribute({}) %}

{# Required by Blockquote to map prop values to strings used in classname #}
{% set align_items_options = {
  "left": "start",
  "center": "center",
  "right": "end"
} %}

{# Blockquote content is not required to be wrapped in a <p> tag, but if it is, update variables accordingly #}
{% set quote_tag = "<p>" in content ? "replace-with-grandchildren" : "replace-with-children" %}
{% set text_tag = "<p>" in content ? "div" : "p" %}

{# Check that the component's current prop values are valid. if not, default to the schema default #}
{% set size = size in schema.properties.size.enum ? size : schema.properties.size.default %}
{% set align_items = alignItems in schema.properties.alignItems.enum ? alignItems : schema.properties.alignItems.default %}
{% set border = border in schema.properties.border.enum ? border : schema.properties.border.default %}

{# Array of classes based on the defined + default props #}
{% set classes = [
  base_class,
  size in schema.properties.size.enum ? base_class ~ "--" ~ size : "",
  align_items in align_items_options|keys ? base_class ~ "--align-items-" ~ align_items_options[align_items],
  border == 'none' ? base_class ~ "--borderless" : base_class ~ "--bordered-" ~ border,
  indent ? base_class ~ "--indented" : "",
  fullBleed ? base_class ~ "--full" : ""
] %}

{#
  Sort classes passed in via attributes into two groups:
  1. Those that should be applied to the inner tag (namely, "is-" and "has-" classes)
  2. Those that should be applied to the outer custom element (everything else EXCEPT c-bolt-* classes, which should never be passed in via attributes)
#}
{% set outer_classes = [] %}
{% set inner_classes = classes %}

{% for class in attributes["class"] %}
  {% if class starts with "is-" or class starts with "has-" %}
    {% set inner_classes = inner_classes|merge([class]) %}
  {% elseif class starts with "c-bolt-" == false %}
    {% set outer_classes = outer_classes|merge([class]) %}
  {% endif %}
{% endfor %}

<bolt-blockquote
  {% if outer_classes %} class="{{ outer_classes|join(' ') }}" {% endif %}
  {{ attributes|without('class') }}
>
  <blockquote {{ inner_attributes.addClass(inner_classes) }} is="shadow-root">
    {% if logo %}
      <replace-with-children class="{{ "#{base_class}__logo" }}">
        {% include "@bolt/logo.twig" with logo|merge({
          "lazyload": false, 
          slot: "logo",
        }) only %}
      </replace-with-children>
    {% endif %}

    <{{quote_tag}} class="{{ "#{base_class}__quote" }}">
      {% include "@bolt-components-headline/text.twig" with {
        text: content,
        tag: text_tag,
        size: size,
        weight: "semibold"
      } only %}
    </{{quote_tag}}>

    {% if author %}
      <replace-with-grandchildren>
        <footer class="{{ "#{base_class}__footer" }}">
            {% if author.image %}
              <replace-with-grandchildren class="{{ "#{base_class}__footer-item" }}">
                <div class="{{ "#{base_class}__image" }}">
                  {% include "@bolt/image.twig" with author.image|merge({"lazyload": false, slot:"author-image"}) only %}
                </div>
              </replace-with-grandchildren>
            {% endif %}

            {% if author.name %}
              <replace-with-children class="{{ "#{base_class}__footer-item" }}">
                {% include "@bolt-components-headline/text.twig" with {
                  text: author.name,
                  tag: "cite",
                  size: "xsmall",
                  weight: "bold",
                  slot: "author-name"
                } %}
              </replace-with-children>
            {% endif %}

            {% if author.title %}
              <replace-with-children class="{{ "#{base_class}__footer-item" }}">
                {% include "@bolt-components-headline/text.twig" with {
                  text: author.title,
                  tag: "cite",
                  size: "xsmall",
                  slot: "author-title"
                } only %}
              </replace-with-children>
            {% endif %}
        </footer>
      </replace-with-grandchildren>
    {% endif %}
  </blockquote>
</bolt-blockquote>
