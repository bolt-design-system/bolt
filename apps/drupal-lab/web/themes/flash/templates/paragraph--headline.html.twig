{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set headline = {text: paragraph.field_headline.value} %}

{% set fields = [
    {size: paragraph.field_headline_size.value},
    {transform: paragraph.field_transform.value},
    {style: paragraph.field_style.value},
    {tag: paragraph.field_tags.value},
    {align: paragraph.field_align.value},
    {weight: paragraph.field_weight.value},
    {url: paragraph.field_url.value},
    {quoted: paragraph.field_quoted.value == '1'},
  ]
%}

{% for field in fields %}
  {% if field|first is not empty %}
    {% set headline = headline|merge({
      (field|keys[0]) : (field|first),
    }) %}
  {% endif %}
{% endfor %}

{% if paragraph.field_icon_extend.value is not empty %}
  {% set iconItem = {} %}

  {% if paragraph.field_icon_extend.entity.field_icon.value is not empty %}
    {% set iconItem = iconItem|merge({
      name: paragraph.field_icon_extend.entity.field_icon.value
    }) %}
  {% endif %}

  {% if paragraph.field_icon_extend.entity.field_position.value is not empty %}
    {% set iconItem = iconItem|merge({
      position: paragraph.field_icon_extend.entity.field_position.value
    }) %}
  {% endif %}

  {% if paragraph.field_icon_extend.entity.field_background.value is not empty %}
    {% set iconItem = iconItem|merge({
      background: paragraph.field_icon_extend.entity.field_background.value
    }) %}
  {% endif %}

  {% if paragraph.field_icon_extend.entity.field_icon_color.value is not empty %}
    {% set iconItem = iconItem|merge({
      color: paragraph.field_icon_extend.entity.field_icon_color.value
    }) %}
  {% endif %}

  {% if paragraph.field_icon_extend.entity.field_size.value is not empty %}
    {% set iconItem = iconItem|merge({
      size: paragraph.field_icon_extend.entity.field_size.value
    }) %}
  {% endif %}

  {% if iconItem|length > 0 %}
    {% set headline = headline|merge({
      icon: iconItem
    }) %}
  {% endif %}
{% endif %}

<div style="border-bottom: 1px dotted;padding: 50px;">
  {% include '@bolt-components-headline/headline.twig' with headline only %}
  {% if headline|length > 1 %}
    <h4>Attributes</h4>
    <ul>
      {% for key, param in headline %}
        {% if key != 'text' %}
          {% set val = key != 'icon' ? param : param.name %}
          <li><strong>{{ key }}:</strong> {{ val }}</li>
        {% endif %}
      {% endfor %}
    </ul>
  {% endif %}
</div>