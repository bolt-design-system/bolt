//// VARIABLES ////

// global map to be filled via variables
$bolt-css-variables: ();

// the variable may be set to "true" anywhere in the code,
// so native CSS custom properties will be used instead of the Sass global map
$bolt-css-vars-use-native: true !default;

// enables the output of debug messages
$bolt-css-vars-debug-log: false !default;

//// FUNCTIONS ////

///
// Assigns a variable to the global map
///
@function bolt-css-vars-assign($name: null, $value: null) {
  // CHECK PARAMS
  @if ($name==null) {
    @error "Variable name is expected, instead got: null";
  }
  @if ($value == null) {
    @error "Variable value is expected, instead got: null";
  }
  // assign to the global map
  @if ($bolt-css-vars-debug-log and map-get($bolt-css-variables, $name)) {
    @debug "'#{$name}' variable is reassigned";
  }
  @return map-merge($bolt-css-variables, ($name: $value));
}
///
// Emulates var() CSS native function behavior
//
// $args[0] {String} "--" + variable name
// [$args[1]] Optional default value if variable is not assigned yet
//
// E.G.:
// color: var(--main-color);
// background: var(--main-bg, green);
///
@function var($args...) { /* stylelint-disable-line */
  // CHECK PARAMS
  @if (length($args)==0) {
    @error "Variable name is expected to be passed to the var() function";
  }
  @if (str-length(nth($args, 1)) < 2 or str-slice(nth($args, 1), 0, 2) != '--') {
    @error "Variable name is expected to start from '--'";
  }
  // PROCESS
  $name: nth($args, 1);
  $value: map-get($bolt-css-variables, $name);

  @if ($bolt-css-vars-debug-log or not $bolt-css-vars-use-native) { // Sass or debug
    @if ($value==null) { // variable is not provided so far
      @if (length($args)==2) { // the default value is passed
        @if ($bolt-css-vars-debug-log) {
          @debug "Provided default value is used for the variable: '#{$name}'";
        }
        $value: nth($args, 2);
      } @else if ($bolt-css-vars-debug-log) {
        @debug "Variable '#{$name}' is not assigned";
        @if (not $bolt-css-vars-use-native) {
          @debug "The 'var(#{$name}...)' usage will be skipped in the output CSS";
        }
      }
    }
  }
  @if ($bolt-css-vars-use-native) { // CSS variables
    // Native CSS: don't process function in case of native
    @return unquote('var(' + $args + ')');
  } @else {
    // Sass: return value from the map
    @return $value;
  }
}
//// MIXIN ////
///
// CSS mixin to provide variables
// E.G.:
// @include css-vars((
//    --color: rebeccapurple,
//    --height: 68px,
//    --margin-top: calc(2vh + 20px)
// ));
///

// Root: output at the root?
@mixin bolt-css-vars($varMap: null, $root: false) {
  // CHECK PARAMS
  @if ($varMap==null) {
    @error "Map of variables is expected, instead got: null";
  }
  @if (type_of($varMap)!=map) {
    @error "Map of variables is expected, instead got another type passed: #{type_of($varMap)}";
  }
  // PROCESS
  @if ($bolt-css-vars-debug-log or not $bolt-css-vars-use-native) { // Sass or debug
    // merge variables and values to the global map (provides no output)
    @each $name, $value in $varMap {
      $bolt-css-vars: bolt-css-vars-assign($name, $value) !global; // store in global variable
    }
  }
  @if ($bolt-css-vars-use-native) { // CSS variables
    // Native CSS: assign CSS custom properties to the global scope
    @if $root == true {
      @at-root :root {
        @each $name, $value in $varMap {
          @if (type_of($value)==string) {
            #{$name}: $value // to prevent quotes interpolation
          } @else {
            #{$name}: #{$value}
          }
        }
      }
    } @else {
      @each $name, $value in $varMap {
        @if (type_of($value)==string) {
          #{$name}: $value // to prevent quotes interpolation
        } @else {
          #{$name}: #{$value}
        }
      }
    }
  }
}