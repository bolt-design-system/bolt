{# re-assign old itemAlignment paramater to the new `align` name that's replacing it; avoids breaking change till post v1.0 #}
{% if itemAlignment %}
  {% if itemAlignment == "start" %}
    {% set itemAlignment = "left" %}
  {% endif %}

  {% set align = itemAlignment %}
{% endif %}


{% if style %}
  {% set color = style %}
{% endif %}

{# Set up the custom element's prop values based on the params passed into the Twig template - used to hydrate the component's initial state and appearance once the Button Component's JavaScript kicks in #}
 <bolt-button
    {% if align %} align="{{ align }}" {% endif %}
    {% if color %} color="{{ color }}" {% endif %}
    {% if size %} size="{{ size }}" {% endif %}
    {% if url %} url="{{ url }}" {% endif %}
    {% if width %} width="{{ width }}" {% endif %}
    {% if rounded %} rounded=" {{ rounded }}" {% endif %}
    {% if iconOnly %} icon-only="true" {% endif %}
    {% if disabled == true %} disabled {% endif %}

    {# Failsafe to manually switch off Shadow DOM encapsulation #}
    {% if noShadow %} no-shadow {% endif %}

    {% if target or attributes['target'] %} target="{{ target | default(attributes['target']) }}" {% endif %}


    {# todo: rename on-click + on-click-target to only allow onClick + onClickTarget to unify the prop syntax; deprecate adding these via attributes #}
    {% if onClick or attributes['on-click'] %} on-click="{{ onClick | default(attributes['on-click']) }}" {% endif %}
    {% if onClickTarget or attributes['on-click-target'] %} on-click-target="{{ onClickTarget | default(attributes['on-click-target']) }}" {% endif %}


    {#
      @todo: create Twig function to translate shorthand utility class references to actual classnames
      For example:

      {% include "@bolt/button.twig' with {
        text: "Example Button",
        color: "primary",
        utils: [
          "-mb-sm", --> small negative margin bottom spacing
          "mt-md"   --> medium margin top spacing
        ]
      } %}
    #}
    {# @todo: share `utils` prop across all Twig components #}
    {# workaround to still allow external utility classes to get added (ex. for spacing or layout tweaks) while still encapsulating internal styling #}
    {% if utils %} class="{{ utils|join(' ') }}"{% endif %}
  >

  {{ text }}

  {# include "@bolt-components-button/button.template.twig" #}
</bolt-button>
