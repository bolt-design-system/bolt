
{% set manifestConfigFile = "@bolt-assets/bolt-webpack-manifest#{bolt.data.config.lang ? "-" ~ bolt.data.config.lang[0] : ""}.json" %}

{% if fileExists(manifestConfigFile) %}
  {% set assets = get_data(manifestConfigFile) %}
{% else %}
  {% set assets = [] %}
{% endif %}

<!-- WIP. Temp solution to async load multiple lang-specific CSS builds based on query string in URL -->
{% if bolt.data.config.i18n %}
  {% set allAssets = {} %}
  {% set langs = bolt.data.config.lang %}

  {% for lang, key in langs %}
    {% set langManifest = "@bolt-assets/bolt-webpack-manifest#{key ? "-" ~ key : ""}.json" %}

    {% if fileExists(langManifest) %}
      {% set langAssets = get_data(langManifest) %}
      {% set allAssets = allAssets|merge({
        ('' ~ key): langAssets
      }) %}
    {% endif %}
  {% endfor %}
{% endif %}





<!DOCTYPE html>
<html lang="en-US" class="{{ bolt.data.config.prod ? '' : 'js-fonts-loaded' }}">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width" />
    <title>Bolt Design System</title>

    <link rel="apple-touch-icon" sizes="180x180" href="/pattern-lab/favicons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/pattern-lab/favicons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/pattern-lab/favicons/favicon-16x16.png">
    <link rel="manifest" href="/pattern-lab/favicons/site.webmanifest">
    <link rel="mask-icon" href="/pattern-lab/favicons/safari-pinned-tab.svg" color="#009999">
    <link rel="shortcut icon" href="/pattern-lab/favicons/favicon.ico">
    <meta name="apple-mobile-web-app-title" content="Bolt Design System">
    <meta name="application-name" content="Bolt Design System">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="msapplication-config" content="/pattern-lab/favicons/browserconfig.xml">
    <meta name="theme-color" content="#1f2656">

    <!-- Default OG Tag examples (related to Bolt Share Component) -->
    {% include "@bolt-components-share/src/_share-meta-example.twig" %}

    <!-- async load PL's CSS -->
    <link rel="preload" href="/pattern-lab/styleguide/css/pattern-lab.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <link rel="stylesheet" href="{{ assets["bolt-global.css"] | default("/pattern-lab/build/bolt-global.css") }}" media="all" />

    <noscript>
      <link href="/pattern-lab/styleguide/css/pattern-lab.css" rel="stylesheet">
    </noscript>


    {# @TODO: wire this up to use Critical CSS #}
    {% if bolt.data.config.prod %}
      <style>
        {{ inline( assets["bolt-components-critical-fonts.css"] | default("") ) }}
      </style>

      {# @TODO: wire this up to use Critical JS #}
      <script>
        {{ inline( assets["bolt-components-critical-fonts.js"] | default("") ) }}
      </script>
    {% endif %}

      <script>
        {{ inline( assets["bolt-components-critical-css-vars.js"] | default("") ) }}
      </script>


    <!-- WIP. Temp solution to async load multiple lang-specific CSS builds based on query string in URL -->
    <script>
    !function(e){"use strict";var n=function(n,t,o){function i(e){if(a.body)return e();setTimeout(function(){i(e)})}function r(){l.addEventListener&&l.removeEventListener("load",r),l.media=o||"all"}var d,a=e.document,l=a.createElement("link");if(t)d=t;else{var f=(a.body||a.getElementsByTagName("head")[0]).childNodes;d=f[f.length-1]}var s=a.styleSheets;l.rel="stylesheet",l.href=n,l.media="only x",i(function(){d.parentNode.insertBefore(l,t?d:d.nextSibling)});var u=function(e){for(var n=l.href,t=s.length;t--;)if(s[t].href===n)return e();setTimeout(function(){u(e)})};return l.addEventListener&&l.addEventListener("load",r),l.onloadcssdefined=u,u(r),l};"undefined"!=typeof exports?exports.loadCSS=n:e.loadCSS=n}("undefined"!=typeof global?global:this);

    /*! loadCSS rel=preload polyfill. [c]2017 Filament Group, Inc. MIT License */
    !function(t){"use strict";t.loadCSS||(t.loadCSS=function(){});var e=loadCSS.relpreload={};if(e.support=function(){var e;try{e=t.document.createElement("link").relList.supports("preload")}catch(t){e=!1}return function(){return e}}(),e.bindMediaToggle=function(t){function e(){t.media=a}var a=t.media||"all";t.addEventListener?t.addEventListener("load",e):t.attachEvent&&t.attachEvent("onload",e),setTimeout(function(){t.rel="stylesheet",t.media="only x"}),setTimeout(e,3e3)},e.poly=function(){if(!e.support())for(var a=t.document.getElementsByTagName("link"),n=0;n<a.length;n++){var o=a[n];"preload"!==o.rel||"style"!==o.getAttribute("as")||o.getAttribute("data-loadcss")||(o.setAttribute("data-loadcss",!0),e.bindMediaToggle(o))}},!e.support()){e.poly();var a=t.setInterval(e.poly,500);t.addEventListener?t.addEventListener("load",function(){e.poly(),t.clearInterval(a)}):t.attachEvent&&t.attachEvent("onload",function(){e.poly(),t.clearInterval(a)})}"undefined"!=typeof exports?exports.loadCSS=loadCSS:t.loadCSS=loadCSS}("undefined"!=typeof global?global:this);


    /*! loadJS: load a JS file asynchronously. [c]2014 @scottjehl, Filament Group, Inc. (Based on http://goo.gl/REQGQ by Paul Irish). Licensed MIT */
    (function( w ){
      var loadJS = function( src, cb ){
        "use strict";
        var ref = w.document.getElementsByTagName( "script" )[ 0 ];
        var script = w.document.createElement( "script" );
        script.src = src;
        script.async = true;
        ref.parentNode.insertBefore( script, ref );
        if (cb && typeof(cb) === "function") {
          script.onload = cb;
        }
        return script;
      };
      // commonjs
      if( typeof module !== "undefined" ){
        module.exports = loadJS;
      }
      else {
        w.loadJS = loadJS;
      }
    }( typeof global !== "undefined" ? global : this ));

    </script>


    <script>
      // commenting out till IE 11 is polyfilled w/ this
      {# var urlParams = new URLSearchParams(window.location.search);

      var allAssets = {{ allAssets|json_encode() }};

      if (urlParams.has('lang')){

        var langSelected = urlParams.get('lang');

        var globalJS = allAssets[langSelected]['bolt-global.js'];
        var globalCSS = allAssets[langSelected]['bolt-global.css'];

        loadCSS(globalCSS);
      } #}
    </script>

  </head>
  {# @todo Get `c-bolt-site` class back someplace, perhaps on a template/layout, perhaps on the `<body>` when needed. Was causing all Patterns to expand too wide, no matter browser width #}
  <body class="">
