<section>

  {% set schema = bolt.data.components['@bolt-components-button'].schema %}
  {% set themes = get_data('@bolt/themes.schema.json') %}
  {% set defaultButtonText = "Button Text" %}
  {% set defaultButtonSize = schema.properties.size.default  %}

  {% set code %}
    {% for style in schema.properties.style.enum %}
      {% if loop.first %}
        {% include "@bolt/button.twig" with {
          "style": style,
          "text": defaultButtonText,
          "attributes": {
            "class": [
              "js-bolt-demo-element"
            ]
          }
        } %}
      {% endif %}
    {% endfor %}
  {% endset %}

  {#- verbatim -%}
  {{ code | raw }}
  {%- endverbatim -#}

  <div class="u-bolt-padding-medium js-theming-example" style="border: 1px dotted; text-align: center;">
    {{ code | raw }}
  </div>


  {% set boltThemingControls = "bolt-demo-theming-controls--" ~ random() %}

  <label>Container Theme</label>
  {% for color in themes.properties.colors.enum %}
    {% set boltThemingControl = "bolt-demo-theming-control--" ~ random() %}

    <label for="{{ boltThemingControl }}">
      <input id="{{ boltThemingControl }}" type="radio"  name="{{ boltThemingControls }}" {{ loop.first ? "checked" : ""}} data-theme="{{ color }}" class="js-bolt-theming-toggle">
      <span for="{{ boltThemingControl }}" role="button">
        {{ color }}
      </span>
    </label>
  {% endfor %}
  <script>
    var themingToggle = document.querySelectorAll('.js-bolt-theming-toggle');
    var themingContainer = document.querySelector('.js-theming-example');
    var prefix = "t-bolt-";

    var classes = themingContainer.className.split(" ").filter(function(c) {
      return c.lastIndexOf(prefix, 0) !== 0;
    });

    themingToggle.forEach(function(element) {
      function toggleColor(element){
        themingContainer.className = classes.join(" ").trim();
        themingContainer.classList.add("t-bolt-" + element.getAttribute('data-theme'));
      }

      if (element.checked){
        toggleColor(element);
      }

      element.addEventListener('change', function(e){
        toggleColor(e.target);
      });
    });
  </script>


  <br>

  <div>
    <label>Button Style</label>
    <select class="js-bolt-demo-variation-dropdown" name="bolt-demo-variation-dropdown">
      {% for style in schema.properties.style.enum %}
        <option class="js-bolt-demo-variation-dropdown-item" value="{{ style }}" {% if loop.first %} selected {% endif %}>{{ style }}</option>
      {% endfor %}
    </select>
    <script>
      var variationDropdown = document.querySelector('.js-bolt-demo-variation-dropdown');
      var demoElement = document.querySelector('.js-bolt-demo-element');

      function setDemoVariation(){
        demoElement.setAttribute('color', variationDropdown.value);
      }

      setDemoVariation();

      variationDropdown.addEventListener('change', function(e){
        setDemoVariation();
      });
    </script>
  </div>


  <div>
    <label>Button Text</label>
    <input class="js-bolt-demo-text-input" name="bolt-demo-text" value="{{ defaultButtonText }}">

    <script>
      var demoTextInput = document.querySelector('.js-bolt-demo-text-input');
      var demoElement = document.querySelector('.js-bolt-demo-element');

      function setDemoText(){
        var innerElement = demoElement.querySelector('.js-bolt-pre-rendered');

        if (innerElement){
          innerElement.textContent = demoTextInput.value;
        } else {
          demoElement.textContent = demoTextInput.value;
        }
      }

      setDemoText();

      demoTextInput.addEventListener('input', function(e){
        setDemoText();
      });
    </script>
  </div>


  <div>
    <label>Button Size</label>

    {% set boltSizeControls = "bolt-demo-size-controls--" ~ random() %}

    {% for size in schema.properties.size.enum %}
      {% set boltSizeControl = "bolt-demo-size-control--" ~ random() %}

      <label for="{{ boltSizeControl }}">
        <input id="{{ boltSizeControl }}" type="radio"  name="{{ boltSizeControls }}" {{ size == defaultButtonSize  ? "checked" : ""}} data-size="{{ size }}" class="js-bolt-size-toggle">
        <span for="{{ boltSizeControl }}" role="button">
          {{ size }}
        </span>
      </label>
    {% endfor %}
    <script>
      var sizeToggle = document.querySelectorAll('.js-bolt-size-toggle');
      var demoElement = document.querySelector('.js-bolt-demo-element');

      sizeToggle.forEach(function(element) {
        function toggleSize(element){
          demoElement.setAttribute('size', element.getAttribute('data-size'));
        }

        if (element.checked){
          toggleSize(element);
        }

        element.addEventListener('change', function(e){
          toggleSize(e.target);
        });
      });
    </script>
  </div>


  <br>
  <br>




  {# @TODO: given that the current schema-docs.twig doesn't take in a `code` param, are we missing an include somewhere? #}
  <details>
    <summary>Bolt Button Schema</summary>
    <p>
      {% include "@utils/schema-docs.twig" with schema only %}
    </p>
  </details>

</section>