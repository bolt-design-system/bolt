/* ------------------------------------ *\
   Layout
\* ------------------------------------ */

// TODO:
// - background inclusion errors

@import '@bolt/core-v3.x';

/**
 * Align options
 * 1. The terminology is future proof for i18n. It acts accordingly to the writing mode of a page.
 */
$_bolt-layout-align-options: (
  'unset': 'unset',
  'justify': 'space-between',
  'start': 'flex-start',
  'center': 'center',
  'end': 'flex-end',
);

$_bolt-layout-col-min-width-large: map-get($bolt-breakpoints, small) / 2;
$_bolt-layout-col-min-width-small: $_bolt-layout-col-min-width-large / 3;

$bolt-layout-templates: (
  '25/25/50': minmax(#{$_bolt-layout-col-min-width-small}, 1fr)
    minmax(#{$_bolt-layout-col-min-width-small}, 1fr)
    minmax(
      #{$_bolt-layout-col-min-width-small},
      calc(50% - var(--c-bolt-layout-gutter) / 2)
    ),
  '25/50/25': minmax(#{$_bolt-layout-col-min-width-small}, 1fr)
    minmax(
      #{$_bolt-layout-col-min-width-small},
      calc(50% - var(--c-bolt-layout-gutter) / 2)
    )
    minmax(#{$_bolt-layout-col-min-width-small}, 1fr),
  '25/75': minmax(#{$_bolt-layout-col-min-width-small}, 1fr)
    minmax(
      #{$_bolt-layout-col-min-width-large},
      calc(75% - var(--c-bolt-layout-gutter) / 3)
    ),
  '33/67': minmax(#{$_bolt-layout-col-min-width-small}, 1fr)
    minmax(
      #{$_bolt-layout-col-min-width-large},
      calc(100% / 3 * 2 - var(--c-bolt-layout-gutter) / 3)
    ),
  '50/25/25':
    minmax(
      #{$_bolt-layout-col-min-width-small},
      calc(50% - var(--c-bolt-layout-gutter) / 2)
    )
    minmax(#{$_bolt-layout-col-min-width-small}, 1fr)
    minmax(#{$_bolt-layout-col-min-width-small}, 1fr),
  '67':
    minmax(
      #{$_bolt-layout-col-min-width-large},
      calc(100% / 3 * 2 - var(--c-bolt-layout-gutter) / 3)
    ),
  '67/33':
    minmax(
      #{$_bolt-layout-col-min-width-large},
      calc(100% / 3 * 2 - var(--c-bolt-layout-gutter) / 3)
    )
    minmax(#{$_bolt-layout-col-min-width-small}, 1fr),
  '75':
    minmax(
      #{$_bolt-layout-col-min-width-large},
      calc(75% - var(--c-bolt-layout-gutter) / 3)
    ),
  '75/25':
    minmax(
      #{$_bolt-layout-col-min-width-large},
      calc(75% - var(--c-bolt-layout-gutter) / 3)
    )
    minmax(#{$_bolt-layout-col-min-width-small}, 1fr),
  'flag': minmax(80px, var(--bolt-layout-flag-width, 150px)) 1fr,
  'fourths': repeat(4, minmax(#{$_bolt-layout-col-min-width-small}, 1fr)),
  'halves': repeat(2, minmax(#{$_bolt-layout-col-min-width-small}, 1fr)),
  'thirds': repeat(3, minmax(#{$_bolt-layout-col-min-width-small}, 1fr)),
  'tiles': repeat(auto-fit, minmax(#{$_bolt-layout-col-min-width-small}, 1fr)),
);

/**
 * Global wrapper vars
 * 1. The vars can be used on other components that acts like layout but doesn't use layout markup. For example: navbar.
 */
:root {
  // @todo: move these to global
  --bolt-wrapper-max-width: #{bolt-breakpoint(xxlarge)};
  --bolt-wrapper-spacing-x: 30px;
  --bolt-wrapper-padding: var(--bolt-wrapper-spacing-x);
  --col-min-width: 250px;
  @include bolt-mq(medium) {
    --bolt-wrapper-padding: calc(var(--bolt-wrapper-spacing-x) * 2);
  }
  @include bolt-mq(xxlarge) {
    --bolt-wrapper-padding: calc(
      var(--bolt-wrapper-spacing-x) * 2 +
        (100vw - var(--bolt-wrapper-max-width)) / 2
    );
  }
}

/**
 * Layout component
 */
bolt-layout {
  // Setting up vars to be customized
  --c-bolt-layout-gutter: var(--bolt-spacing-x-medium);
  --c-bolt-layout-row-gutter: var(--bolt-spacing-y-medium);
  --c-bolt-layout-padding-top: var(--bolt-spacing-y-medium);
  --c-bolt-layout-padding-bottom: var(--bolt-spacing-y-medium);

  display: grid;
  grid-gap: var(--c-bolt-layout-gutter);
  row-gap: var(--c-bolt-layout-row-gutter);
  position: relative;
  right: 50%;
  left: 50%;
  width: 100vw;
  margin: 0 -50vw;
  padding-top: var(--c-bolt-layout-padding-top);
  padding-bottom: var(--c-bolt-layout-padding-bottom);

  // This must always follow the wrapper rules. Only way to customize it is to change the global wrapper vars.
  padding-inline-end: var(--bolt-wrapper-padding);
  padding-inline-start: var(--bolt-wrapper-padding);

  @each $layout-name, $layout-value in $bolt-layout-templates {
    &[template~='#{$layout-name}'] {
      grid-template-columns: $layout-value;
    }
  }

  // loop through breakpoints and templates to set template options.
  @each $breakpoint in $bolt-breakpoints {
    $breakpoint-name: nth($breakpoint, 1);
    @each $layout-name, $layout-value in $bolt-layout-templates {
      @if ($breakpoint-name == small or $breakpoint-name == medium) {
        @include bolt-mq($breakpoint-name) {
          &[template~='#{$layout-name}@from-#{$breakpoint-name}'] {
            grid-template-columns: $layout-value;
          }
        }
      }
    }
  }

  @each $option in $_bolt-layout-align-options {
    $option-name: nth($option, 1);
    $option-value: nth($option, 2);

    &[align-items='#{$option-name}'] {
      justify-content: #{$option-value};
    }

    &[valign-items='#{$option-name}'] {
      align-items: #{$option-value};
    }
  }

  > bolt-background {
    grid-area: none;
  }

  > bolt-layout-item {
    display: flex;
    flex: 0 1 100%;
    flex-direction: column;
    order: 1;
    position: relative;

    // loop through breakpoints and set source order options.
    @each $breakpoint in $bolt-breakpoints {
      $breakpoint-name: nth($breakpoint, 1);
      @if ($breakpoint-name == small or $breakpoint-name == medium) {
        &[source-order='primary@until-#{$breakpoint-name}'] {
          order: 0;
          @include bolt-mq(#{$breakpoint-name}) {
            order: 1;
          }
        }

        &[source-order='secondary@until-#{$breakpoint-name}'] {
          order: 2;
          @include bolt-mq(#{$breakpoint-name}) {
            order: 1;
          }
        }
      }
    }

    // Loop through the align map to generate valign options.
    @each $option in $_bolt-layout-align-options {
      $option-name: nth($option, 1);
      $option-value: nth($option, 2);

      &[valign-self*='#{$option-name}'] {
        align-self: #{$option-value};
      }

      // Loop through the spacing map to generate valign offsets.
      @each $size in $bolt-spacing-multiplier-system {
        $size-name: nth($size, 1);

        &[valign-self*='start-offset-#{$size-name}'] {
          margin-top: var(
            --c-bolt-layout-item-valign-start-offset,
            calc(var(--bolt-spacing-y-#{$size-name}) * -1)
          );
        }

        &[valign-self*='end-offset-#{$size-name}'] {
          margin-bottom: var(
            --c-bolt-layout-item-valign-end-offset,
            calc(var(--bolt-spacing-y-#{$size-name}) * -1)
          );
        }
      }
    }

    > *:last-child:not(:only-child) {
      margin-top: auto; // Pushes the last child in a layout item to the bottom.
    }
  }

  // Loop through the spacing map to generate padding and gutter options.
  @each $size in $bolt-spacing-multiplier-system {
    $size-name: nth($size, 1);

    &[padding-top='#{$size-name}'] {
      --c-bolt-layout-padding-top: var(--bolt-spacing-y-#{$size-name});
    }

    &[padding-bottom='#{$size-name}'] {
      --c-bolt-layout-padding-bottom: var(--bolt-spacing-y-#{$size-name});
    }

    &[gutter='#{$size-name}'] {
      --c-bolt-layout-gutter: var(--bolt-spacing-x-#{$size-name});
    }

    &[row-gutter='#{$size-name}'] {
      --c-bolt-layout-row-gutter: var(--bolt-spacing-y-#{$size-name});
    }
  }

  &[padding-top='none'] {
    --c-bolt-layout-padding-top: 0;
  }

  &[padding-bottom='none'] {
    --c-bolt-layout-padding-bottom: 0;
  }

  &[gutter='none'] {
    --c-bolt-layout-gutter: 0;
  }

  &[row-gutter='none'] {
    --c-bolt-layout-row-gutter: 0;
  }
}
