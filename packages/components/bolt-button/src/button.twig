{% set schema = bolt.data.components['@bolt-components-button'].schema %}

{% if enable_json_schema_validation %}
  {{ validate_data_schema(schema, _self) | raw }}
{% endif %}

{% set baseClass = "c-bolt-button" %}
{% set attributes = create_attribute(attributes|default({})) %}

{# re-assign old itemAlignment paramater to the new `align` name that's replacing it; avoids breaking change till post v1.0 #}
{# @todo Salem, is it safe to remove the coverage for legacy itemAlignment parameter? #}
{% if itemAlignment %}
  {% if itemAlignment == "start" %}
    {% set itemAlignment = "left" %}
  {% endif %}
  {% set align = itemAlignment %}
{% endif %}

{# set up psuedo self-validation by limiting param values to what's specifically allowed in the component schema #}
{% set alignOptions = schema.properties.align.enum %}
{% set roundedOptions = schema.properties.rounded.enum %}
{% set sizeOptions = schema.properties.size.enum %}
{% set styleOptions = schema.properties.style.enum %}
{% set tagOptions = schema.properties.tag.enum %}
{% set transformOptions = schema.properties.transform.enum %}
{% set widthOptions = schema.properties.width.enum %}
{% set iconPositions = schema.properties.icon.properties.position.enum %}

{# check if the value set to a prop is allowed or defined. if not, default to the default value specified in the component's schema (if one exists) #}
{% set align = align in alignOptions ? align : schema.properties.align.default %}
{% set iconOnly = iconOnly | default(false) %}
{% set size = size in sizeOptions ? size : schema.properties.size.default %}
{% set style = style in styleOptions ? style : schema.properties.style.default %}
{% set tag = tag in tagOptions ? tag : schema.properties.tag.default %}
{% set transform = transform in transformOptions ? transform : schema.properties.transform.default %}

{% if tag == "submit" %}
  {% set tag = "button" %}
  {% set attributes = attributes.setAttribute("type", "submit") %}
{% elseif tag == "link" or tag == "a" or url != null %}
  {% set tag = "a" %}
  {% if url %}
    {% set attributes = attributes.setAttribute("href", url) %}
  {% endif %}
{% elseif tag == "reset" %}
  {% set tag = "button" %}
  {% set attributes = attributes.setAttribute("type", "reset") %}
{% endif %}

{# shorthand for manually setting HTML attribute `type` such as submit or reset #}
{% if type %}
  {% set attributes = attributes.setAttribute("type", type) %}
{% endif %}

{% set classes = [
  baseClass,
  disabled ? "c-bolt-button--disabled" : "",
  size in sizeOptions ? "c-bolt-button--#{size}" : "",
  width in widthOptions ? "c-bolt-button--#{width}" : "",
  rounded in roundedOptions ? "c-bolt-button--#{rounded}" : "",
  style in styleOptions ? "c-bolt-button--#{style}" : "c-bolt-button--#{schema.properties.style.default}",
  transform in transformOptions and transform != "none" ? "c-bolt-button--#{transform}": "",
  align in alignOptions ? baseClass ~ "--" ~ align : "",
] %}

{% if disabled %}
  {% set attributes = attributes.setAttribute("disabled", true) %}
{% endif %}

{% if icon %}
  {% set iconPosition = icon.position in iconPositions ? icon.position : schema.properties.icon.properties.position.default %}
{% endif %}


{# filter external classnames to allow a very small select number to trickle onto the inner button tag ("is-" and "has-" classes really) while still allowing utility classes and other misc non-component classes to get added to the outer custom element #}
{% set outerClasses = utils | default([]) %}
{% set innerClasses = classes %}

{% for class in attributes["class"] %}
  {% if class starts with "u-" or class starts with "js-" %}
    {% set outerClasses = outerClasses|merge([class]) %}
  {% elseif class starts with "is-" or class starts with "has-" %}
    {% set innerClasses = innerClasses|merge([class]) %}
  {% elseif not class starts with "c-bolt-" %}
    {% set outerClasses = outerClasses|merge([class]) %}
  {% endif %}
{% endfor %}


{% macro slottedIcon(icon, iconPosition, slotName) %}
  {% if icon and iconPosition == slotName %}
    <replace-with-children class="c-bolt-button__icon">
      {% set icon = icon | merge({
        attributes: {
          slot: slotName
        }
      }) %}
      {% include "@bolt/icon.twig" with icon only %}
    </replace-with-children>
  {% endif %}
{% endmacro %}

{% import _self as macros %}

{# Set up the custom element's prop values based on the params passed into the Twig template - used to hydrate the component's initial state and appearance once the Button Component's JavaScript kicks in #}
<bolt-button
  {% if align %} align="{{ align }}" {% endif %}
  {% if style %} color="{{ style }}" {% endif %}
  {% if size %} size="{{ size }}" {% endif %}
  {% if url %} url="{{ url }}" {% endif %}
  {% if width %} width="{{ width }}" {% endif %}
  {% if rounded %} rounded=" {{ rounded }}" {% endif %}
  {% if iconOnly %} icon-only="true" {% endif %}
  {% if transform %} transform="{{ transform }}" {% endif %}
  {% if disabled == true %} disabled {% endif %}
  {% if noShadow %} no-shadow {% endif %}

  {% if target or attributes['target'] %} target="{{ target | default(attributes['target']) }}" {% endif %}

  {# todo: rename on-click + on-click-target to only allow onClick + onClickTarget to unify the prop syntax; deprecate adding these via attributes #}
  {% if onClick or attributes['on-click'] %} on-click="{{ onClick | default(attributes['on-click']) }}" {% endif %}
  {% if onClickTarget or attributes['on-click-target'] %} on-click-target="{{ onClickTarget | default(attributes['on-click-target']) }}" {% endif %}

  {{ attributes | without('class') | without('target') | without('id') | without('type') }}
  {% if outerClasses %} class="{{ outerClasses|join(' ') }}" {% endif %}
>

  {# choose a semantic <a> tag or <button> tag for better accessibility, depending on whether or not a url is getting passed along #}
  <{{ tag }} {{ attributes | without('class') | without('on-click') | without('on-click-target') }} class="{{ innerClasses|join(' ') }}" is="shadow-root">
    {{ macros.slottedIcon(icon, iconPosition, 'before') }}
    <replace-with-children class="c-bolt-button__item {{ iconOnly ? 'u-bolt-visuallyhidden' : '' }}">{{ text }}</replace-with-children>
    {{ macros.slottedIcon(icon, iconPosition, 'after') }}
  </{{ tag }}>
</bolt-button>
