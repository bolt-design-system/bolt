# Thanks to StencilJS (https://stenciljs.com/docs/stencil-config) for a little inspiration for some of these configuration names. Naming things is hard!

  $schema: http://json-schema.org/draft-04/schema#
  title: Bolt Build Tools
  type: object
  required:
    - buildDir
    - components
  additionalProperties: false
  properties:
    namespace:
      type: string
      title: Namespace prefix to use in classnames
      default: 'bolt'
    lang:
      type: array, string
      title: Array of language-specific builds to generate. The 1st langugage specified is the default used for local development.
      default:
        - en
    i18n:
      type: boolean
      description: Should the design system's assets be compiled for multiple languages? Automatically defaults to false for local dev, true for prod.
    port:
      type: number
      title: Desired port for Browsersync server
      default: 3000
    proxyPort:
      type: number
      title: Desired port for Webpack Proxy
      default: 8080
    proxyHeader:
      type: string
      description: Special request header when proxying Webpack's dev server
      default: 'browsersync-proxy'
    templatesDir:
      type: array
      title: Template paths being added
      default:
        - templates
    copy:
      type: array
      description: The copy config is an array of objects specifying any files or folders that should get copied over to the build directory. Uses https://github.com/webpack-contrib/copy-webpack-plugin under the hood so any configuration options available there also apply here as well.
      items:
        type: object
        properties:
          from:
            type: [string, object]
            description: The files and/or directories to copy over
          to:
            type: [string, object]
            description: The destination of the files being copied over
          flatten:
            type: boolean
            description: Specify if any nested folders should get flattened down to a single level when copying over.
    globalData:
      type: object
      properties:
        js:
          $ref: '#/definitions/globalJsData'
        scss:
          $ref: '#/definitions/globalSassData'
    env:
      type: string
      title: Environment Type
      description: What is being compiled? Pattern Lab? Drupal? A static site? Or is the new in-progress Progressive Web App (PWA) that combines Pattern Lab + the docs site into one single environment?
      enum:
        - pl
        - static
        - drupal
        - pwa
    renderingService:
      type: boolean
      description: Automatically start up the PHP / Twig Rendering Service?
      default: false
    renderingServicePort:
      type: number
      title: Desired port for PHP Rendering Service
      default: 8087
    srcDir:
      type: string
      title: Source Directory
    webpackStats:
      type: boolean
      title: Write WebPack stats file
      description: Creates a [WebPack Stats Data file](https://webpack.js.org/api/stats/) called `webpack-stats.json` inside `buildDir`. Great for [this](http://webpack.github.io/analyse). Should probably run with `--prod`.
      default: false
    publicPath:
      type: string
      title: publicPath Directory
    plConfigFile:
      type: string
      title: Pattern Lab Config File Path
    buildDir:
      type: string
      description: The buildDir config specifies where Bolt's compiled files are saved after every build. These are the generated scripts which will be requested by the browser. The build directory should be relative to the wwwDir setting (i.e. inside it).
    wwwDir:
      type: string
      title: Path to server root
      description: "Where static files are served from. The wwwDir config specifies the public web distribution directory. This directory is commonly the root directory for a server, where all static files can be served. This directory is built and rebuilt directly from the source files. Note: We recommend this directory is not committed to a repository."
    startPath:
      type: string
      title: Local server start path
      description: This is the `path/to/file.html` in `http://localhost:3000/path/to/file.html`
      default: '/'
    webpackDevServer:
      type: boolean
      default: false
      description: Enable the WebPack Dev Server.
    dataDir:
      type: string
      description: This is the directory where generated json data files exist with information about the overall build. Defaults to `data` inside `buildDir`
    openServerAtStart:
      type: boolean
      default: false
      description: If, after starting `npm start`, a Browser opens.
    quick:
      type: boolean
      default: false
      description: Try to be quicker by skipping some steps that might not be needed if everything is recently built and in good working order.
    verbosity:
      type: integer
      default: 2
      description: Logging level (Range of 0 to 5) How 'loud' or 'quiet' do you want the console output to be?
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
    components:
      type: object
      properties:
        global:
          $ref: '#/definitions/components'
        individual:
          $ref: '#/definitions/components'
    extraTwigNamespaces:
      type: object
      title: Extra Twig Namespaces
      description: >-
        You can add Twig Namespaces using this and it serves two purposes:

        1. To add extra namespaces that have not been declared
        2. To add extra paths to previously declared namespaces

        Assuming we've already declared the `foo` namespaces to look in `~/my-dir1`.
        Then someone uses `extraNamespaces` to declare that `foo` will look in `~/my-dir2`
        This will not overwrite it, but *prepend* to the paths, resulting in a namespace setting like this:

        ```
        'foo': {
         paths: ['~/my-dir2', '~/my-dir1']
        }
        ```

        This causes the folder declared in `extraNamespaces` to be looked in first for templates, before our default; allowing end user developers to selectively overwrite some templates.

        Follows the conventions from [this plugin](https://packagist.org/packages/evanlovely/plugin-twig-namespaces).

    images:
      type: object
      description: Image resizing options, which can handle multiple sets.
      properties:
        sets:
          type: array
          items:
            type: object
            properties:
              base:
                type: string
                description: The base path, which is combined with `glob` to indicate the source file. The directories used here will *not* be used to construct the output path.
              glob:
                type: string
                description: The glob pattern, which can include plain directories, and is used to create the output path along with `dist`.
              dist:
                type: string
                description: The output path, which is combined with what `glob` returns.
    prod:
      type: boolean
      description: Production build, will compress assets.
      default: false
    schemaErrorReporting:
      description: Setting for where schema errors should be reported.  Note that reporting to cli will cause builds to fail if there are errors.
      type: string
      default: console
      enum:
        - none
        - console
        - cli

  definitions:
    components:
      type: array
      items:
        oneOf:
          -
            type: string
          -
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
                description: 'Becomes filename: NAME.css and NAME.js'
              scss:
                type: string
                title: Entry file for Sass. Import statements will be followed
              js:
                type: string
                title: Entry file for JS. Import statements will be followed
              required:
                - name
    globalJsData:
        type: array
        uniqueItems: true
        required:
          - items
        items:
          type: string
          description: '`.js` filename to pull in'
    globalSassData:
        type: array
        uniqueItems: true
        required:
          - items
        items:
          type: string
          description: '`.scss` filename to pull in'
