sudo: required
dist: trusty
language: php
php:
  - 7.1

addons:
  sauce_connect: true

before_install:
  - openssl aes-256-cbc -K $encrypted_4537e53f71e7_key -iv $encrypted_4537e53f71e7_iv -in scripts/bolt-design-system-bot.private-key.pem.enc -out scripts/bolt-design-system-bot.private-key.pem -d
  - nvm install # version lifted from `.nvmrc`
  - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.9.4
  - export PATH="$HOME/.yarn/bin:$PATH"

services:
  - docker

# Stages run sequentially; the jobs in them run in parallel
stages:
  - Prep
  - Test Live Site
#  Just an example of having a whole stage be branch conditional; see more conditions: https://docs.travis-ci.com/user/conditions-v1
#  - name: Super Hard Tests
#    if: branch = master

jobs:
  include:
    - stage: Prep
      name: 'Smoke Tests: Install, Lint, Unit'
      before_script:
        - phpenv config-rm xdebug.ini
        - composer global require hirak/prestissimo
        - yarn run setup:quick
        - ./scripts/check-run-queue.js 'Lint'
        - ./scripts/check-run-queue.js 'Unit'
      script:
        - ./test/lint.js
        - ./test/unit.js
      cache:
        yarn: true
        directories:
          - node_modules

    - stage: Prep
      name: 'Build + Deploy'
      # before_script:
      #   - phpenv config-rm xdebug.ini
      #   - composer global require hirak/prestissimo
      #   - yarn run setup
      script:
        # - yarn run build
        # - yarn run deploy
        - docker --log-level error pull boltdesignsystem/bolt || true
        - docker build --cache-from boltdesignsystem/bolt --tag boltdesignsystem/bolt .
        - docker images
        - echo $DOCKER_HUB_PASS | docker login --username $DOCKER_HUB_USER --password-stdin
        - GIT_SHA="$(git rev-parse --short HEAD)"
        - docker tag boltdesignsystem/bolt boltdesignsystem/bolt:latest
        - docker tag boltdesignsystem/bolt boltdesignsystem/bolt:${GIT_SHA}
        - docker --log-level error push boltdesignsystem/bolt:latest
        - docker --log-level error push boltdesignsystem/bolt:${GIT_SHA}
      after_script:
        - ./scripts/check-run-in-progress.js 'Deploy - now.sh'
        - cd scripts && npm install
        - npm run deploy
        # need to reset git repo before `update-read-only-git-repos.sh`
        - cd "`git rev-parse --show-toplevel`" && git clean -fd && git reset --hard HEAD && cd -
        - ./release/update-read-only-git-repos.sh
      cache:
        yarn: true
        directories:
          - node_modules
          - scripts/node_modules
          - docs-site/cache
          - www/pattern-lab/styleguide/js
          - www/pattern-lab/styleguide/css
          - www/pattern-lab/index.html

    - stage: Test Live Site
      name: 'Nightwatch End-to-End'
      script:
        - yarn run setup
        - ./scripts/check-run-in-progress.js 'Nightwatch'
        - export NOW_URL=$(./scripts/get-latest-deploy.js)
        - echo "The Now URL is $NOW_URL"
        - time curl -sSf "$NOW_URL" > /dev/null # warming up site
        - npx nightwatch --config nightwatch.js --env chrome,ie11
        - sleep 10
        - ./scripts/report-nightwatch-results.js
      cache:
        yarn: true
        directories:
          - node_modules

    - stage: Test Live Site
      name: 'Ensure site is live'
      script:
        - yarn run setup
        - ./scripts/check-run-in-progress.js 'Site is live'
        - export NOW_URL=$(./scripts/get-latest-deploy.js)
        - echo "Testing Now URL \"$NOW_URL\" to see if it is alive."
#        - time curl -sSf "$NOW_URL" > /dev/null || ./scripts/check-run-failure.js 'Site is live' && exit 1
#        - ./scripts/check-run-success.js 'Site is live'
        - time curl -sSf "$NOW_URL" > /dev/null
      after_success:
        - ./scripts/check-run-success.js 'Site is live'
      after_failure:
        - ./scripts/check-run-failure.js 'Site is live'
      cache:
        yarn: true
        directories:
          - node_modules

    - stage: Test Live Site
      name: 'Example master only job'
      if: branch = master
      script:
        - echo "This only runs on master builds"

notifications:
  email:
    on_success: never
    on_failure: never # @todo re-enable
  slack:
    secure: cNto+gWAoK1JM9jBNG4i4rMSybv3twMbqlFSCohQFBDMwKFMdlyWqFDX6iYKtHxWEDzrZyRz3qiJ8/S44mgjeKJ/xHbHDtPchp/KL2P1htipvwD2EZXobcBEGl83v2rmtFO1WNJUPB3RIJE2yt1wJsX7NIXpDw82hePmaIvNJmtbLpK/J5uaFqGNHIsctmULgVmGSNSTyK4nYxxjNNLd0EvO37Y6VN8FhsKNu2NHMKeeQxinEvETDUh8XuqXZYNWE3PBvVa4OiDhgnr5K27jsnWX+wEmqg0xY+CMf7mUSTqVN61fA7LnHyM0qcGGmB6YTv4QYLMwPydp+nsjDcm3St9D+KOTsQ4ExOaEAL/6EnAEpl8GtxST+ytdqswhCC4yMCO61Hy+M5AoXgDSGrrXHgZakDMAcEVcJdH38791hRxcuM3ldVmHAlAWFdgRLG5rRMVh3qoXz7jbraoTdjyKMegQIQdKR2SX7O9Dv0EEtLz4lTFN2RENvAjLggUPPU+ESoUHmSbwmPGnt7jy3ra2AI3nnYpfn/0e6Op/A3z7HLbdm3XyuNWoTPhy1mc4Adca+HosJ37UPv7nDRIGds1sKYAeWq94+rEk+/6IQ/oRIDRhSYsQbLLWnU6DH4o7iOj7D+X/ngjqmF75nW2s5+7rtdBHFvNzOJalCKHiDTMfdlQ=
