////
/// @group Settings: Layout
/// @author Mike Mai
////

/* ------------------------------------ *\
  Spacing Scale
\* ------------------------------------ */

// Unit on which all spacing is based
/// Bolt gutter spacing value
$bolt-spacing-gutter: 1.55rem !default;
/// Bolt default leading spacing value
$bolt-spacing-leading: 1.35 !default;
/// Bolt squished spacing value
$bolt-spacing-squished: 0.5 !default;
/// Bolt stretched spacing value
$bolt-spacing-stretched: 1.5 !default;

/// Bolt's definition of spacing scale. Used within 'export-data()' to JSON.
/// @type Map
$bolt-spacing-values: (
  '': 1,
  'xxsmall': 0.125,
  'xsmall': 0.25,
  'small': 0.5,
  'medium': 1,
  'large': 2,
  'xlarge': 4,
  'xxlarge': 8,
  'xxxlarge': 16
) !default;

@include bolt-export-data('spacing/scale.bolt.json', $bolt-spacing-values);

/// Bolt's definition of available spacing properties.
/// @type Map
$bolt-spacing-properties: ('padding', 'margin') !default;

/// Bolt's definition of spacing directions.
/// @type Map
$bolt-spacing-directions: ('', 'top', 'right', 'bottom', 'left') !default;

/// Bolt's definition of spacing types.
/// @type Map
$bolt-spacing-types: ('', 'squished', 'stretched') !default;

/* ------------------------------------ *\
   New Maps for CSS vars
\* ------------------------------------ */

/**
 * Base value map
 * x: horizontal
 * y: vertical
 *
 * Base values are kept unitless to allow pure math in edge cases. For example, using `em` instead of `rem`:
 * calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-medium) * 1em)
 */
$bolt-spacing-system: (
  'x': 1.55,
  'y': 1.35
) !default;

/**
 * Base multiplier map
 */
$bolt-spacing-multiplier-system: (
  'xxlarge': 8,
  'xlarge': 4,
  'large': 2,
  'medium': 1,
  'small': 0.5,
  'xsmall': 0.25,
  'xxsmall': 0.125
) !default;

/**
 * Spacing token maps
 *
 * Token values are kept as formulas so they can be updated by changing base values and multipliers alone.
 */
$bolt-spacing-x-system: (
  'xxlarge':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-xxlarge) * 1rem),
  'xlarge':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-xlarge) * 1rem),
  'large':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-large) * 1rem),
  'medium':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-medium) * 1rem),
  'small':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-small) * 1rem),
  'xsmall':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-xsmall) * 1rem),
  'xxsmall':
    calc(var(--bolt-spacing-x) * var(--bolt-spacing-multiplier-xxsmall) * 1rem)
) !default;

$bolt-spacing-y-system: (
  'xxlarge':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-xxlarge) * 1rem),
  'xlarge':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-xlarge) * 1rem),
  'large':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-large) * 1rem),
  'medium':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-medium) * 1rem),
  'small':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-small) * 1rem),
  'xsmall':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-xsmall) * 1rem),
  'xxsmall':
    calc(var(--bolt-spacing-y) * var(--bolt-spacing-multiplier-xxsmall) * 1rem)
) !default;
