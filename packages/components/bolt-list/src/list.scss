@import '@bolt/core-v3.x';

/* ------------------------------------ *\
   List
\* ------------------------------------ */

// Custom element display and built-in spacing
@include bolt-repeat-rule(('bolt-list', ':host')) {
  // Clear-fix required to prevent margin collapse due to negative margin on Bolt List.
  // Happens when List is inside Stack component, for example.
  // https://css-tricks.com/snippets/css/clear-fix/
  @include bolt-clearfix;
  @include bolt-margin-bottom(medium);

  display: block;

  &:last-child {
    @include bolt-margin-bottom(0);
  }
}

// List base styles
//
// 1. Reset typography so it doesn't inherit from a higher level container.
// 2. Reset text-align so it doesn't conflict with the align prop which handles the horizontal alignment of inline items in a list, not the text-align within.
// 3. Width must be defined in order for the list to dislay correctly in Firefox.
.c-bolt-list {
  @include bolt-margin(0);
  @include bolt-padding(0);
  @include bolt-font-family(body); // [1]
  @include bolt-font-size(medium); // [1]
  @include bolt-font-weight(regular); // [1]

  list-style: none;
  text-align: left; // [2]
  text-align: start; // [2]
}

// Display Prop
.c-bolt-list--display-block {
  display: block;
}

.c-bolt-list--display-inline {
  display: inline-flex;
  flex-flow: row wrap;
}

.c-bolt-list--display-flex {
  display: flex;
  flex-flow: row wrap;
}

@include bolt-repeat-rule(
  (
    '.c-bolt-list--display-flex bolt-list-item',
    '.c-bolt-list--display-flex ::slotted(bolt-list-item)'
  )
) {
  flex: 1;
}

@each $breakpoint in $bolt-breakpoints {
  $breakpoint-name: nth($breakpoint, 1);

  .c-bolt-list--display-inline\@#{$breakpoint-name} {
    display: flex;
    flex-flow: column wrap;

    @include bolt-mq($breakpoint-name) {
      display: inline-flex;
      flex-flow: row wrap;
    }
  }
}

// Spacing Prop
@each $spacing-value in $bolt-spacing-values {
  $spacing-value-name: nth($spacing-value, 1);

  .c-bolt-list--spacing-#{$spacing-value-name}:not(.c-bolt-list--inset) {
    margin-bottom: bolt-v-spacing(#{$spacing-value-name}) * -1;
    margin-left: bolt-spacing(#{$spacing-value-name}) * -1;
  }

  // CSS hack targeting any Firefox version: https://css-tricks.com/snippets/css/css-hacks-targeting-firefox/
  @-moz-document url-prefix('') {
    .c-bolt-list--spacing-#{$spacing-value-name}.c-bolt-list--inset {
      // The inline here is talking about the items inside, the List component itself is still a block level element that would fill up the space of any container.
      &.c-bolt-list--display-inline,
      &.c-bolt-list--display-flex {
        width: 100%; // [3]
      }

      @each $breakpoint in $bolt-breakpoints {
        $breakpoint-name: nth($breakpoint, 1);

        &.c-bolt-list--display-inline\@#{$breakpoint-name} {
          @include bolt-mq($breakpoint-name) {
            width: 100%; // [3]
          }
        }
      }
    }

    .c-bolt-list--spacing-#{$spacing-value-name}:not(.c-bolt-list--inset) {
      // The inline here is talking about the items inside, the List component itself is still a block level element that would fill up the space of any container.
      &.c-bolt-list--display-inline,
      &.c-bolt-list--display-flex {
        width: calc(100% + #{bolt-spacing($spacing-value-name)}); // [3]
      }

      @each $breakpoint in $bolt-breakpoints {
        $breakpoint-name: nth($breakpoint, 1);

        &.c-bolt-list--display-inline\@#{$breakpoint-name} {
          @include bolt-mq($breakpoint-name) {
            width: calc(100% + #{bolt-spacing($spacing-value-name)}); // [3]
          }
        }
      }
    }
  }

  .c-bolt-list--spacing-#{$spacing-value-name}.c-bolt-list--inset {
    @include bolt-margin-bottom(0);
    @include bolt-margin-left(0);
  }
}

// Align options
$bolt-list-alignments: start, center, end, justify;

@each $alignment in $bolt-list-alignments {
  .c-bolt-list--align-#{$alignment} {
    &.c-bolt-list--display-inline {
      @if $alignment != center and $alignment != justify {
        justify-content: flex-#{$alignment};
      } @else if $alignment == justify {
        justify-content: space-between;
      } @else {
        justify-content: #{$alignment};
      }
    }

    @each $breakpoint in $bolt-breakpoints {
      $breakpoint-name: nth($breakpoint, 1);

      &.c-bolt-list--display-inline\@#{$breakpoint-name} {
        @include bolt-mq($breakpoint-name) {
          @if $alignment != center and $alignment != justify {
            justify-content: flex-#{$alignment};
          } @else if $alignment == justify {
            justify-content: space-between;
          } @else {
            justify-content: #{$alignment};
          }
        }
      }
    }
  }
}

// Valign options
$bolt-list-valignments: start, center, end;

@each $alignment in $bolt-list-valignments {
  .c-bolt-list--valign-#{$alignment} {
    &.c-bolt-list--display-inline,
    &.c-bolt-list--display-flex {
      @if $alignment != center {
        align-items: flex-#{$alignment};
      } @else {
        align-items: #{$alignment};
      }
    }

    @each $breakpoint in $bolt-breakpoints {
      $breakpoint-name: nth($breakpoint, 1);

      &.c-bolt-list--display-inline\@#{$breakpoint-name} {
        @include bolt-mq($breakpoint-name) {
          @if $alignment != center {
            align-items: flex-#{$alignment};
          } @else {
            align-items: #{$alignment};
          }
        }
      }
    }
  }
}

// Nowrap
.c-bolt-list--nowrap {
  &.c-bolt-list--display-inline,
  &.c-bolt-list--display-flex {
    flex-flow: row nowrap;
  }

  @each $breakpoint in $bolt-breakpoints {
    $breakpoint-name: nth($breakpoint, 1);

    &.c-bolt-list--display-inline\@#{$breakpoint-name} {
      @include bolt-mq($breakpoint-name) {
        flex-flow: row nowrap;
      }
    }
  }
}
