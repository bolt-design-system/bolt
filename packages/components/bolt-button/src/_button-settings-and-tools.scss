/* ------------------------------------ *\
   Button settings and tools
\* ------------------------------------ */

/**
 * Settings
 */

$bolt-color-button-text: bolt-color(white);
$bolt-color-primary: bolt-color(yellow);
$bolt-color-secondary: bolt-color(indigo, light);
$bolt-button-shadow: $bolt-shadow--small;
$bolt-button-shadow--hover: $bolt-shadow--large;
$bolt-button-border-width: $bolt-border-width;
$bolt-button-border-style: $bolt-border-style;
$bolt-button-border-radii: (
  'regular': $bolt-border-radius,
  'full': 50em,
);
$bolt-button-transition: $bolt-transition;
$bolt-button-translate--hover: translate3d(0, -1px, 0);
$bolt-button-translate--active: translate3d(0, 1px, 0);

/**
 * Tools
 */

@function bolt-button-border-radius($name) {
  @return map-get($bolt-button-border-radii, $name);
}

@mixin bolt-button-raised-effect {
  &:hover:not([disabled]),
  &.is-hover:not([disabled]) {
    @include bolt-shadow('level-20', true);
  }

  &:active:not([disabled]),
  &.is-active:not([disabled]) {
    transform: $bolt-button-translate--active;
  }
}

@mixin bolt-button {
  @include bolt-button-reset;
  @include bolt-no-select;
  @include bolt-font-weight(semibold);
  display: flex;
  align-items: center;
  position: relative;
  transform: translate3d(0, 0, 0);
  text-decoration: none;
  vertical-align: middle;
  cursor: pointer;
  border-radius: bolt-button-border-radius('regular');
  border-width: $bolt-button-border-width;
  border-style: $bolt-button-border-style;
  border-color: transparent;
  @include bolt-shadow('level-20');
  box-shadow: var(--bolt-button-box-shadow, #{bolt-shadow('level-20')});
  outline: none;
  will-change: box-shadow;

  &:before {
    content: '';
    display: block;
    opacity: 0.2;
    position: absolute;
    top: 0;
    left: 0;
    z-index: bolt-z-index('background') - 5;
    width: 100%;
    height: 100%;
    pointer-events: none;
    border-radius: bolt-button-border-radius('regular');
    @include bolt-shadow('level-10', true);
    box-shadow: var(--bolt-button-box-shadow, #{bolt-shadow('level-10')});
    will-change: box-shadow;
  }

  &:focus:not(:hover):not(.c-bolt-button--disabled):not(.c-bolt-button--inert),
  &.is-focus:not(.is-hover):not(.is-disabled) {
    box-shadow: 0 -1px 2px bolt-theme(background),
      0 1px 2px bolt-theme(background),
      0 0 5px rgb(59, 153, 252),
      0 -1px 0.65rem rgb(59, 153, 252),
      0 1px 0.65rem rgb(59, 153, 252); // @todo: This mimmicks the browser default blue. We will update it with our own colors later on.
  }
}

// Button Colors / Types
@mixin bolt-button-style--primary() {
  color: bolt-theme(text-on-primary);
  background-color: bolt-theme(primary);

  &:hover,
  &.is-hover {
    color: bolt-theme(text-on-primary-lighten-15);
    background-color: bolt-theme(primary-lighten-15);
  }

  &:focus:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert),
  &.is-focus:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert) {
    color: bolt-theme(text-on-primary-darken-15);
    background-color: bolt-theme(primary-darken-15);
  }

  &:active,
  &.is-active {
    color: bolt-theme(text-on-primary-darken-25);
    background-color: bolt-theme(primary-darken-25);
  }
}


/**
  @todo: how do we want to handle these global theming fallback values?
  **/
@mixin bolt-button-style--tertiary() {
  color: var(--bolt-theme--tertiary--text-color--default, #{rgba(bolt-color(black), 0.9)});
  background-color: var(--bolt-theme--tertiary--background-color--default, #{rgba(bolt-color(gray), 0.15)});

  &,
  &:before {
    box-shadow: none;
  }

  &:hover,
  &.is-hover {
    color: var(--bolt-theme--tertiary--text-color--hover, #{bolt-color(black)});
    background-color: var(--bolt-theme--tertiary--background-color--hover, #{rgba(bolt-color(gray), 0.3)});
  }

  &:focus:hover:not(:active),
  &:active:focus,
  &:focus,
  &.is-focus {
    color: var(--bolt-theme--tertiary--text-color--focus, #{bolt-color(black)});
    background-color: var(--bolt-theme--tertiary--background-color--focus, #{rgba(bolt-color(gray), 0.4)}); /* [1] */
  }

  &:active:hover,
  &:active,
  &.is-active {
    color: var(--bolt-theme--tertiary--text-color--active, #{bolt-color(black)});
    background-color: var(--bolt-theme--tertiary--background-color--active, #{rgba(bolt-color(gray), 0.5)});
  }
}

@mixin bolt-button-style--secondary() {
  color: bolt-theme(text-on-secondary);
  background-color: bolt-theme(secondary);

  &:hover,
  &.is-hover {
    color: bolt-theme(text-on-secondary-lighten-5);
    background-color: bolt-theme(secondary-lighten-5);
  }

  &:focus:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert),
  &.is-focus:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert) {
    color: bolt-theme(text-on-secondary-darken-3);
    background-color: bolt-theme(secondary-darken-3);
  }

  &:active,
  &.is-active {
    color: bolt-theme(text-on-secondary-darken-10);
    background-color: bolt-theme(secondary-darken-10);
  }
}

@mixin bolt-button-style--text() {
  // Remove box-shadow and background-color completely for text buttons.

  opacity: bolt-opacity(100);
  color: bolt-theme(headline-link);
  text-decoration: none;

  &,
  &[disabled],
  &.c-bolt-button--disabled {
    background-color: transparent;
  }

  &,
  &:before {
    box-shadow: none;
  }

  &:hover:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert),
  &.is-hover:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert) {
    opacity: $bolt-global-link-hover-opacity;
  }

  &:focus:active:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert),
  &.is-focus.is-active:not([disabled]):not(.c-bolt-button--disabled):not(.c-bolt-button--inert),
  &:active,
  &.is-active {
    opacity: $bolt-global-link-active-opacity;
  }
}

@mixin bolt-button-style--disabled() {
  opacity: 1;
  transform: none;
  color: bolt-theme(text-disabled);
  cursor: not-allowed;

  * {
    pointer-events: none;
  }

  &:not(.c-bolt-button--text){
    background-color: bolt-theme(disabled);
  }

  &:before {
    content: '';
    display: none;
  }
}

// Teal-specific color. Needs refactoring to combine with primary button logic above ^
@mixin bolt-button-color--teal {
  $button-background-color-default: bolt-color(indigo, light);
  $button-background-color-hover: mix(
    $bolt-global-button-hover-color,
    $button-background-color-default,
    $bolt-global-button-hover-mix
  );
  $button-background-color-active: mix(
    $bolt-global-button-active-color,
    $button-background-color-default,
    $bolt-global-button-active-mix
  );
  &.c-bolt-button,
  &.c-bolt-button:visited {
    color: bolt-text-contrast($button-background-color-default);
    background-color: $button-background-color-default;
  }
  &:focus,
  &:hover {
    color: bolt-text-contrast($button-background-color-default);
    background-color: $button-background-color-hover;
  }
  &:active {
    color: bolt-text-contrast($button-background-color-default);
    background-color: $button-background-color-active;
  }
}

// @todo: refactor and revive state color options
// .c-bolt-button--success {
//   @include bolt-button-color(success);
// }
// .c-bolt-button--warning {
//   @include bolt-button-color(warning);
// }
// .c-bolt-button--error {
//   @include bolt-button-color(error);
// }

@mixin bolt-button-style($style) {
  @if ($style == 'primary') {
    @include bolt-button-style--primary;
  } @else if ($style == 'secondary') {
    @include bolt-button-style--secondary;
  } @else if ($style == 'text') {
    @include bolt-button-style--text;
  } @else if ($style == 'disabled') {
    @include bolt-button-style--disabled;
  } @else if ($style == 'tertiary') {
    @include bolt-button-style--tertiary;
  }
}
