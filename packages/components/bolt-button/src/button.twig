{% set schema = bolt.data.components['@bolt-components-button'].schema %}

{# Defaults for a vanilla `Button` component #}
{% set prefix = "c-bolt-" %}
{% set componentName = "button" %}
{% set baseClass = prefix ~ componentName %}
{% set attributes = create_attribute(attributes|default({})) %}

{# re-assign old itemAlignment paramater to the new `align` name that's replacing it; avoids breaking change till post v1.0 #}
{# @todo Salem, is it safe to remove the coverage for legacy itemAlignment parameter? #}
{% if itemAlignment %}
  {% if itemAlignment == "start" %}
    {% set itemAlignment = "left" %}
  {% endif %}
  {% set align = itemAlignment %}
{% endif %}

{# set up psuedo self-validation by limiting param values to what's specifically allowed in the component schema #}
{% set alignOptions = schema.properties.align.enum|remove_null %}
{% set roundedOptions = schema.properties.rounded.enum %}
{% set sizeOptions = schema.properties.size.enum|remove_null %}
{% set styleOptions = schema.properties.style.enum|remove_null %}
{% set tagOptions = schema.properties.tag.enum|remove_null %}
{% set transformOptions = schema.properties.transform.enum|remove_null %}
{% set widthOptions = schema.properties.width.enum|remove_null %}

{# check if the value set to a prop is allowed or defined. if not, default to the default value specified in the component's schema (if one exists) #}
{% set align =  align in alignOptions ? align : schema.properties.align.default %}
{% set iconOnly = iconOnly | default(false) %}
{% set rounded = rounded in roundedOptions ? rounded : schema.properties.rounded.default %}
{% set size = size in sizeOptions ? size : schema.properties.size.default %}
{% set style = style in styleOptions ? style : schema.properties.style.default %}
{% set tag = tag in tagOptions ? tag : schema.properties.tag.default %}
{% set transform = transform in transformOptions ? transform : schema.properties.transform.default %}
{% set width = width in widthOptions ? width : schema.properties.width.default %}

{% if tag == "submit" %}
  {% set tag = "button" %}
  {% set attributes = attributes.setAttribute("type", "submit") %}
{% elseif tag == "link" or tag == "a" or url != null %}
  {% set tag = "a" %}
  {% if url %}
    {% set attributes = attributes.setAttribute("href", url) %}
  {% endif %}
{% elseif tag == "reset" %}
  {% set tag = "button" %}
  {% set attributes = attributes.setAttribute("type", "reset") %}
{% endif %}

{# shorthand for manually setting HTML attribute `type` such as submit or reset #}
{% if type %}
  {% set attributes = attributes.setAttribute("type", type) %}
{% endif %}

{% set classes = [
  baseClass,
  disabled ? baseClass ~ "--disabled" : "",
  size in sizeOptions ? baseClass ~ "--" ~ size : "",
  width in widthOptions and width != "" ? baseClass ~ "--" ~ width : "",
  rounded in roundedOptions and rounded != schema.properties.rounded.default ? baseClass ~ "--" ~ rounded : "",
  style in styleOptions ? baseClass ~ "--" ~ style : baseClass ~ "--primary",
  transform in transformOptions ? baseClass ~ "--" ~ transform : "",
  align in alignOptions ? baseClass ~ "--" ~ align : "",
] %}

{% if disabled %}
  {% set attributes = attributes.setAttribute("disabled", true) %}
{% endif %}

{# Set up the custom element's prop values based on the params passed into the Twig template - used to hydrate the component's initial state and appearance once the Button Component's JavaScript kicks in #}
 <bolt-button
    {% if align %} align="{{ align }}" {% endif %}
    {% if style %} color="{{ style }}" {% endif %}
    {% if size %} size="{{ size }}" {% endif %}
    {% if url %} url="{{ url }}" {% endif %}
    {% if width %} width="{{ width }}" {% endif %}
    {% if rounded %} rounded=" {{ rounded }}" {% endif %}
    {% if iconOnly %} icon-only="true" {% endif %}
    {% if transform %} transform="{{ transform }}" {% endif %}
    {% if disabled == true %} disabled {% endif %}

    {# Failsafe to manually switch off Shadow DOM encapsulation #}
    {% if noShadow %} no-shadow {% endif %}

    {% if target or attributes['target'] %} target="{{ target | default(attributes['target']) }}" {% endif %}


    {# todo: rename on-click + on-click-target to only allow onClick + onClickTarget to unify the prop syntax; deprecate adding these via attributes #}
    {% if onClick or attributes['on-click'] %} on-click="{{ onClick | default(attributes['on-click']) }}" {% endif %}
    {% if onClickTarget or attributes['on-click-target'] %} on-click-target="{{ onClickTarget | default(attributes['on-click-target']) }}" {% endif %}


    {#
      @todo: create Twig function to translate shorthand utility class references to actual classnames
      For example:

      {% include "@bolt/button.twig' with {
        text: "Example Button",
        color: "primary",
        utils: [
          "-mb-sm", --> small negative margin bottom spacing
          "mt-md"   --> medium margin top spacing
        ]
      } %}
    #}
    {# @todo: share `utils` prop across all Twig components #}
    {# workaround to still allow external utility classes to get added (ex. for spacing or layout tweaks) while still encapsulating internal styling #}
    {% if utils %} class="{{ utils|join(' ') }}"{% endif %}
  >


  {# choose a semantic <a> tag or <button> tag for better accessibility, depending on whether or not a url is getting passed along #}
  <{{ tag }} {{ attributes.addClass('c-bolt-button__root') | without('on-click') | without('on-click-target') }}>

    {# Add component-specific classes to a Bolt temp element that gets removed and replaced by it's children once the JS kicks in #}
    <replace-with-children class="{{ classes|join(' ') }} Hello">
      <span class="{{ "#{baseClass}__item" }} {{ iconOnly ? 'u-bolt-visuallyhidden' : '' }}">{{ text }}</span>

      {% if icon %}
        <span class="{{ "#{baseClass}__icon" }}">
          {% include "@bolt/icon.twig" with icon only %}
        </span>
      {% endif %}
    </replace-with-children>

  </{{ tag }}>
</bolt-button>

{% if enable_json_schema_validation %}
  {{ validate_data_schema('@bolt-components-button/button.schema.yml', _self) }}
{% endif %}
