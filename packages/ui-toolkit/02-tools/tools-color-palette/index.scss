/*------------------------------------*\
  Color Palette
\*------------------------------------*/

/**
  * Helper functions for applying global color swatches stored in Sass Maps
  */
@import '@bolt/settings-colors';
@import '@bolt/tools-sassy-maps'; //So map-get-deep works


@function palette($color, $tone: 'initial') {
  @return map-get-deep($palettes, $color, $tone);
}

@function to-string($value) {
  @return inspect($value);
}

@function convert-color-map($map-old, $map-new, $override: true) {
  $case: "lower-case";
  // Iterate through each value of the new map
  @each $key, $new-value in $map-new {
    // Check if that value already exists on the old map
    @if type-of($new-value) == map and type-of($key) != color and map-has-key($map-old, $key) {
      // There is an existing key
      $old-value: map-get($map-old, $key);
      @if type-of($new-value) == map and type-of($old-value) == map {
        // If both are maps, recurse regardless of $override
        $merged-value: convert-color-map($old-value, $new-value);
        $stringified-key: to-string($key);
        $new-key: call("to-" + $case, $stringified-key);
        $map-old: map-merge(map-remove($map-old, $key), (
          quote($new-key): $merged-value
        ));

      }@else{
        // Otherwise check $override
        @if $override{
          $stringified-key: to-string($key);
          $new-key: call("to-" + $case, $stringified-key);
          $map-old: map-merge(map-remove($map-old, $key), (
            quote($new-key): $new-value
          ));
        }
      }
    }@else{
      // There is no existing key so add
      $stringified-key: to-string($key);
      $new-key: call("to-" + $case, $stringified-key);

      $map-old: map-merge(map-remove($map-old, $key), (
        quote($new-key): $new-value
      ));
    }
  }
  @return $map-old;
}


@mixin test-color($name, $tone: 'initial', $type: null) {
  $color: map-get-deep($palettes, $name, $tone);

  color: $color;

  @if $type == null {
    color: var(--bolt-color-text, $color);
  }
  @else {
    color: var(--bolt-color-#{$type}, $color);
  }
}

@mixin test-background-color($name, $tone: 'initial', $type: null) {
  $background-color: map-get-deep($palettes, $name, $tone);

  background-color: $background-color;

  @if $type == null {
    background-color: var(--bolt-color-background, $background-color);
  }
  @else {
    background-color: var(--bolt-color-#{$type}, $background-color);
  }
}

@mixin test-border-color($name, $tone: 'initial', $type: null) {
  $border-color: map-get-deep($palettes, $name, $tone);

  border-color: $border-color;

  @if $type == null {
    border-color: var(--bolt-color-border, $border-color);
  }
  @else {
    border-color: var(--bolt-color-#{$type}, $border-color);
  }
}

@function text-contrast($color) {
  @if (lightness($color) > 60) {
    @return palette(black); // Lighter backgorund, return dark color
  }
  @else {
    @return palette(white); // Darker background, return light color
  }
}

@mixin _theme-settings(
  $background,          // Background
  $primary,             // Button background
  $secondary,           // Link
  $text: null,          // Text - Defaults to text-contrast($background) if not defined
  $heading: null,       // Heading - Defaults to $text if not defined
  $button-text: null,   // Button text - Defaults to text-contrast($primary) if not defined
  $border: null         // Border - Defaults to $text if not defined
  ) {

  --bolt-color-background: $background;
  --bolt-color-primary: $primary;
  --bolt-color-secondary: $secondary;

  @if $text == null {
    --bolt-color-text: text-contrast($background);
  }
  @else {
    --bolt-color-text: $text;
  }

  @if $heading == null {
    --bolt-color-heading: text-contrast($background);
  }
  @else {
    --bolt-color-heading: $heading;
  }

  @if $button-text == null {
    --bolt-color-button-text: text-contrast($primary);
  }
  @else {
    --bolt-color-button-text: $button-text;
  }

  @if $border == null {
    --bolt-color-border: text-contrast($background);
  }
  @else {
    --bolt-color-border: $border;
  }
}

@mixin test-theme($name: 'xlight') {
  @if $name == 'xlight' {
    @include _theme-settings(
      palette(white),
      palette(blue),
      palette(blue, dark));
  }
  @elseif $name == 'light' {
    @include _theme-settings(
      palette(gray, xlight),
      palette(blue),
      palette(blue, dark));
  }
  @elseif $name == 'dark' {
    @include _theme-settings(
      palette(teal),
      palette(blue, dark),
      palette(blue, light));
  }
  @elseif $name == 'xdark' {
    @include _theme-settings(
      palette(indigo),
      palette(orange),
      palette(blue, light));
  }
  @elseif $name == 'notification' {
    @include _theme-settings(
      palette(blue, light),
      palette(blue, dark),
      palette(blue));
  }
  @elseif $name == 'success' {
    @include _theme-settings(
      palette(success, light),
      palette(success, dark),
      palette(success));
  }
  @elseif $name == 'warning' {
    @include _theme-settings(
      palette(warning, light),
      palette(warning, dark),
      palette(warning));
  }
  @elseif $name == 'error' {
    @include _theme-settings(
      palette(error, light),
      palette(error, dark),
      palette(warning, dark),
      null,
      palette(warning, dark),
      null,
      palette(error));
  }
}

.testing {
  @include test-color(black, initial, text);
  @include test-background-color(white, initial, background);

  * {
    @include test-color(inherit);
    @include test-background-color(inherit);
  }


  /*@include color(yellow);*/
  /*@include color(yellow, dark);*/
  /*@include color(yellow, dark, ui);*/
  /*@include color(yellow, dark, link);*/


  /*@include background-color(teal);*/
  /*@include background-color(teal, xdark);*/
  /*@include background-color(teal, xdark, ui);*/
}

.mm-heading {
  @include test-color(black, initial, heading);
}

.mm-hr {
  @include margin(0 0 medium 0);
  @include padding(0);
  @include test-border-color(black);

  border-width: solid;
  border-style: solid;
  border-bottom: 0;
}

.mm-link {
  @include test-color(blue, initial, secondary);
}

.mm-button {
  @include padding(small);
  @include test-color(white, initial, button-text);
  @include test-background-color(blue, initial, primary);
  @include test-border-color(blue, initial, primary);

  display: inline-block;
  border-width: 1px;
  border-style: solid;
}

.mm-button--secondary {
  @include test-color(black, initial, secondary);
  @include test-background-color(white, initial, background);
  @include test-border-color(black, initial, secondary);
}

.t-xlight {
  @include padding(medium);
  @include test-theme(xlight);
}

.t-light {
  @include padding(medium);
  @include test-theme(light);
}

.t-dark {
  @include padding(medium);
  @include test-theme(dark);
}

.t-xdark {
  @include padding(medium);
  @include test-theme(xdark);
}

.t-success {
  @include padding(medium);
  @include test-theme(success);
}

.t-warning {
  @include padding(medium);
  @include test-theme(warning);
}

.t-error {
  @include padding(medium);
  @include test-theme(error);
}

.t-notification {
  @include padding(medium, squished);
  @include test-theme(notification);
}
